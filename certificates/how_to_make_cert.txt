
###########################################
### Create Private Key and CSR         ####
###########################################
cd private
openssl req -newkey rsa:4096 -nodes -sha256 -keyout johnmuirhealth.com.key -out ../csr/<server name>.johnmuirhealth.com.csr
###############
## Note: New certs are created differently (http://stackoverflow.com/questions/17733536/how-to-convert-a-private-key-to-an-rsa-private-key)
###############
openssl rsa -in server.key -out server_new.key

##########################################
##### Create A Key                   #####
##### (*only do if one is not there) #####
##########################################

# for pass phrase one
openssl genrsa -des3 -rand file1:file2:file3 -out johnmuirhealth.com.key 4096
# without
cd private
openssl genrsa -out johnmuirhealth.com.key 4096

##########################################
####  Create the CSR                 #####

##########################################
cd csr
openssl req -new -key ../private/johnmuirhealth.com.key -out <server name>.johnmuirhealth.com.csr
# answer questions (*See Questions Section Below)

##########################################
####  Create the cert                #####
####  (This is what godaddy does)    #####
##########################################
openssl x509 -req -days 360 -in <server name>.johnmuirhealth.com.csr  -signkey ../private/johnmuirhealth.com.key -out <server name>.johnmuirhealth.com.crt

*************************************************************
How do I create and use my own Certificate Authority (CA)?**
*************************************************************
The short answer is to use the CA.sh or CA.pl script provided by OpenSSL. Unless you have a good reason not to, you should use these for preference. If you cannot, you can create a self-signed Certificate as follows:

Create a RSA private key for your server (will be Triple-DES encrypted and PEM formatted):

$ openssl genrsa -des3 -out server.key 1024

Please backup this host.key file and the pass-phrase you entered in a secure location. You can see the details of this RSA private key by using the command:
$ openssl rsa -noout -text -in server.key

If necessary, you can also create a decrypted PEM version (not recommended) of this RSA private key with:

$ openssl rsa -in server.key -out server.key.unsecure

Create a self-signed Certificate 10 year expiration (X509 structure) with the RSA key you just created (output will be PEM formatted):

$ openssl req -new -x509 -nodes -sha1 -days 3650 -key server.key -out server.crt

This signs the server CSR and results in a server.crt file.
You can see the details of this Certificate using:

$ openssl x509 -noout -text -in server.crt

===== CREATE PFX for IIS WEB SERVERS ====
# Finished Certs are no longer kept here in the repo
1. Download certs in Apache format from GoDaddy

2. Decrypt private key with chef-repo/certificates/private/decrypt.sh

3. Check the keys after download from GoDaddy
#####################################
#### correct private key and cert ###
#####################################
openssl x509 -noout -modulus -in certificate.crt | openssl md5
openssl rsa -noout -modulus -in privateKey.key | openssl md5
openssl rsa -noout -modulus -in public_key.pub -pubin | openssl md5
openssl req -noout -modulus -in CSR.csr | openssl md5

4. Create output of PFX type
#####################################
#### convert a crt to a pfx     #####
#####################################
openssl pkcs12 -export -out ~/Desktop/jmhconnect.net.pfx -inkey ./private/jmhconnect.net.key -in ./finished_certs/jmhconnect.net/jmhconnect.net.crt -certfile <chainfile>
openssl pkcs12 -export -out ~/Desktop/johnmuirhealth.com.pfx -inkey chef-repo/certificates/private/johnmuirhealth.com.key -in ~/Downloads/e98d2a824ed62b54.crt -certfile ~/Downloads/gd_bundle-g2-g1.crt


#####################################
#### Questions                  #####
#####################################
$ openssl req -new -key ../private/johnmuirhealth.com.key -out stdemo.johnmuirhealth.com.csr
You are about to be asked to enter information that will be incorporated
into your certificate request.
What you are about to enter is what is called a Distinguished Name or a DN.
There are quite a few fields but you can leave some blank
For some fields there will be a default value,
If you enter '.', the field will be left blank.
-----
Country Name (2 letter code) [AU]:US
State or Province Name (full name) [Some-State]:California
Locality Name (eg, city) []:Walnut Creek
Organization Name (eg, company) [Internet Widgits Pty Ltd]:John Muir Health
Organizational Unit Name (eg, section) []:EBusiness
Common Name (eg, YOUR name) []:johnmuirhealth.com
Email Address []:scott.marshall@johnmuirhealth.com

Please enter the following 'extra' attributes
to be sent with your certificate request
A challenge password []:
An optional company name []:


#########################################
### Self Signed application cert      ###
#########################################
! from Linux RHE6 server
$ /usr/lib/jvm/jdk1.8.0_92/jre/bin/keytool -genkey -alias crowd2027 -keyalg RSA
Enter keystore password:   ** Use a passphrase you will need to import into keystore with **
Re-enter new password:    
What is your first and last name?  ** This will be what you want to connect to host as its hostname **
  [ ]:  crowd.jmh.internal
What is the name of your organizational unit?
  [ ]: John Muir Health
What is the name of your organization?
  [ ]: ebusiness  
What is the name of your City or Locality?
  [ ]: Walnut Creek
What is the name of your State or Province?
  [ ]: CA  
What is the two-letter country code for this unit?
  [ ]: US  
Is CN=crowd.jmh.internal, OU=John Muir Health, O=ebusiness, L=Walnut Creek, ST=CA, C=US correct?
Enter key password for <crowd2027>
	(RETURN if same as keystore password):  ** same as password above **
-> This creates a .keystore file which you use AS they keystore for the application (e.g. crowd uses for its SSL keystore)


############
Archive
##########################################
#### OPENLDAP CERTS                 ######
##########################################
LDAP cert
openssl genrsa -out ldap.key

openssl req -new -key ldap.key -out ldap.csr
#answer questions

openssl x509 -req -days 1095 -in ldap.csr  -signkey ldap.key -out ldap.cert

openssl req -new -nodes -keyout newreq.pem -out newreq.pem
#answer questions

openssl ca -policy policy_anything -out newcert.pem -infiles newreq.pem

########################
CA.sh -newca
openssl req -new -nodes -keyout newreq.pem -out newreq.pem
CA.sh -sign
cp demoCA/cacert.pem /etc/openldap/cacerts/
cp newcert.pem /etc/openldap/cacerts/ldapcert.pem
cp newreq.pem /etc/openldap/cacerts/ldapkey.pem

##########
Encrypting/decrypting keys
##########
in private directory run...
sh encrypt_keys.sh <Path to Passfile>
